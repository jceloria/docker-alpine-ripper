name: Docker

on:
  push:
    # Publish `master` as Docker `${TAG}` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: docker-alpine-ripper
  TAG: "latest"

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: alpine:3.11

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          docker build . --file Dockerfile -t ${IMAGE_NAME}
          docker run --rm --entrypoint /opt/makemkv/bin/makemkvcon ${IMAGE_NAME} | grep -q makemkvcon


  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: alpine:3.11
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile -t ${IMAGE_NAME}

      - name: Log into registry
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker tag convention
          [ "$VERSION" == "master" ] && VERSION="$TAG"

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag ${IMAGE_NAME} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          docker tag ${IMAGE_NAME} $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
